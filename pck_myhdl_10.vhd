-- File: pck_myhdl_10.vhd
-- Generated by MyHDL 1.0dev
-- Date: Thu Dec 17 10:48:29 2015


library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

use ieee.standard_additions.all;
use ieee.numeric_std_additions.all;
 
package pck_myhdl_10 is

    attribute enum_encoding: string;

    function stdl (arg: boolean) return std_logic;

    function stdl (arg: integer) return std_logic;

    function to_unsigned (arg: boolean; size: natural) return unsigned;

    function to_signed (arg: boolean; size: natural) return signed;

    function to_integer(arg: boolean) return integer;

    function to_integer(arg: std_logic) return integer;

    function to_unsigned (arg: std_logic; size: natural) return unsigned;

    function to_signed (arg: std_logic; size: natural) return signed;

    function bool (arg: std_logic) return boolean;

    function bool (arg: unsigned) return boolean;

    function bool (arg: signed) return boolean;

    function bool (arg: integer) return boolean;

    function "-" (arg: unsigned) return signed;

    function tern_op(cond: boolean; if_true: std_logic; if_false: std_logic) return std_logic;

    function tern_op(cond: boolean; if_true: unsigned; if_false: unsigned) return unsigned;

    function tern_op(cond: boolean; if_true: signed; if_false: signed) return signed;


    function c_l2u (arg: std_logic; size: integer) return unsigned;

    function c_l2s (arg: std_logic; size: integer) return signed;

    function c_i2u (arg: integer; size: integer) return unsigned;

    function c_i2s (arg: integer; size: integer) return signed;

    function c_u2u (arg: unsigned; size: integer) return unsigned;

    function c_u2s (arg: unsigned; size: integer) return signed;

    function c_s2u (arg: signed; size: integer) return unsigned;

    function c_s2s (arg: signed; size: integer) return signed;

end pck_myhdl_10;


package body pck_myhdl_10 is

    function stdl (arg: boolean) return std_logic is
    begin
        if arg then
            return '1';
        else
            return '0';
        end if;
    end function stdl;

    function stdl (arg: integer) return std_logic is
    begin
        if arg /= 0 then
            return '1';
        else
            return '0';
        end if;
    end function stdl;


    function to_unsigned (arg: boolean; size: natural) return unsigned is
        variable res: unsigned(size-1 downto 0) := (others => '0');
    begin
        if arg then
            res(0):= '1';
        end if;
        return res;
    end function to_unsigned;

    function to_signed (arg: boolean; size: natural) return signed is
        variable res: signed(size-1 downto 0) := (others => '0');
    begin
        if arg then
            res(0) := '1';
        end if;
        return res; 
    end function to_signed;

    function to_integer(arg: boolean) return integer is
    begin
        if arg then
            return 1;
        else
            return 0;
        end if;
    end function to_integer;

    function to_integer(arg: std_logic) return integer is
    begin
        if arg = '1' then
            return 1;
        else
            return 0;
        end if;
    end function to_integer;

    function to_unsigned (arg: std_logic; size: natural) return unsigned is
        variable res: unsigned(size-1 downto 0) := (others => '0');
    begin
        res(0):= arg;
        return res;
    end function to_unsigned;

    function to_signed (arg: std_logic; size: natural) return signed is
        variable res: signed(size-1 downto 0) := (others => '0');
    begin
        res(0) := arg;
        return res; 
    end function to_signed;

    function bool (arg: std_logic) return boolean is
    begin
        return arg = '1';
    end function bool;

    function bool (arg: unsigned) return boolean is
    begin
        return arg /= 0;
    end function bool;

    function bool (arg: signed) return boolean is
    begin
        return arg /= 0;
    end function bool;

    function bool (arg: integer) return boolean is
    begin
        return arg /= 0;
    end function bool;

    function "-" (arg: unsigned) return signed is
    begin
        return - signed(resize(arg, arg'length+1));
    end function "-";

    function tern_op(cond: boolean; if_true: std_logic; if_false: std_logic) return std_logic is
    begin
        if cond then
            return if_true;
        else
            return if_false;
        end if;
    end function tern_op;

    function tern_op(cond: boolean; if_true: unsigned; if_false: unsigned) return unsigned is
    begin
        if cond then
            return if_true;
        else
            return if_false;
        end if;
    end function tern_op;

    function tern_op(cond: boolean; if_true: signed; if_false: signed) return signed is
    begin
        if cond then
            return if_true;
        else
            return if_false;
        end if;
    end function tern_op;


    function c_l2u (arg: std_logic; size: integer) return unsigned is
        variable result: unsigned((size - 1) downto 0);
    begin
        result := (others => '0');
        result(0) := arg;
        return result;
    end function c_l2u;

    function c_l2s (arg: std_logic; size: integer) return signed is
        constant r_high: integer := maximum(size - 1, 1);
        variable result: signed(r_high downto 0);
    begin
        result := (others => '0');
        result(0) := arg;
        return result;
    end function c_l2s;

    function c_i2u (arg: integer; size: integer) return unsigned is
    begin
        return unsigned(to_signed(arg, size + 1)((size-1) downto 0));
    end function c_i2u;

    function c_i2s (arg: integer; size: integer) return signed is
    begin
        return to_signed(arg, size + 1)((size-1) downto 0);
    end function c_i2s;

    function c_u2u (arg: unsigned; size: integer) return unsigned is
    begin
        return resize(arg, size);
    end function c_u2u;

    function c_u2s (arg: unsigned; size: integer) return signed is
    begin
        return signed(resize(arg, size));
    end function c_u2s;

    function c_s2u (arg: signed; size: integer) return unsigned is
        constant t_size: natural    := size + 1;
        constant o_left: natural    := size - 1;
        variable tmp: unsigned(size downto 0);
    begin
        tmp := unsigned(resize(arg, t_size));
        return tmp(o_left downto 0);
    end function c_s2u;

    function c_s2s (arg: signed; size: integer) return signed is
        constant t_size: natural    := size + 1;
        constant o_left: natural    := size - 1;
        variable tmp: signed(size downto 0);
    begin
        tmp := resize(arg, t_size);
        return tmp(o_left downto 0);
    end function c_s2s;

end pck_myhdl_10;


